1. 분할정복
* 문제를 나누어 풀고 다시 합치는 방식

- 모듈러 연산(페르마 소정리) ex. 이항정리, 분수 나머지 등

2. 이분탐색
* 정답이 1 ~ long long int 중 하나이고 그 숫자중 하나를 찾는 방식이 빠를때, (각 정답마다  확인시간이 현저히 적을 때)

3. DP
Top-down (재귀를 이용해서 푸는 방식이 좋다. 계속 반복적으로 다른 DP에 접근해야 만 할때 좋다.)
Down-top (점점 쌓아가며 푸는 방식이고 밑에서부터 연계되는 것이 존재할때 사용하는 것이 좋다)

4. 누적합
* 1차원, 2차원 누적합이 따로 존재하는데 2차원으로 인해서 숫자의 합이나 , 바꿔야 하는것들의 합을 최소로하는 값을 알아야 할때 유용하다. 

5. 그리디
* 가장 정답에 가까운 방식으로 가는 것( greedy 해야하는지 아닌지 무조건 확인해야 한다. )

6. 정수론
* 유클리드 호제법, 소수판별(에~체) 등 활용

7. 백트레킹
* 모든 경우의 수를 확인하고 다시 돌아와야 할때 매우 편하다. / 백트래킹을 통해 중간에 돌아오는 것을 설정해 두면 좋음. 재귀방식으로 배열에 저장하는 방식도 좋다.

8. 스택
* 문자열 같이 같은 부분을 없애면서 진행할 때에 사용하면 좋은 방법이다. 중간에 없애고 계속 진행해야 할 때 가장 유용함.

9. bfs, dfs
* 그래프 형태가 주어지고 해당하는 답을 찾으러 갈수 있을때 사용한다.